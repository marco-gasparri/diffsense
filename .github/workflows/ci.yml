---
name: CI

"on":
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e ".[dev]"

      - name: Test with pytest
        run: |
          pytest --cov=diffsense --cov-report=xml \
                 --cov-report=term-missing --cov-fail-under=80

  build:
    needs: [test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 7

  integration-test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: Install from wheel
        run: |
          pip install dist/*.whl

      - name: Test CLI functionality
        run: |
          diffsense --version
          echo "print('hello')" > test1.py
          echo "print('world')" > test2.py
          diffsense test1.py test2.py --no-ai

      - name: Test basic functionality
        run: |
          echo "def test(): pass" > func1.py
          echo "def test(): return True" > func2.py
          diffsense func1.py func2.py --no-ai

  documentation:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Check README links
        run: |
          grep -q "## Installation" README.md
          grep -q "## Quick Start" README.md
          grep -q "## Development" README.md

      - name: Validate package metadata
        run: |
          python -c "
          import tomllib
          import sys

          try:
              with open('pyproject.toml', 'rb') as f:
                  data = tomllib.load(f)

              if 'project' not in data:
                  print('ERROR: Missing [project] section')
                  sys.exit(1)

              project = data['project']

              # Get dynamic fields (version can be dynamic)
              dynamic_fields = project.get('dynamic', [])

              # Check required fields (but skip if they're dynamic)
              required_fields = ['name', 'version', 'description']
              missing_fields = []

              for field in required_fields:
                  if field not in project and field not in dynamic_fields:
                      missing_fields.append(field)

              if missing_fields:
                  print(f'ERROR: Missing required fields: {missing_fields}')
                  print(f'Available: {list(project.keys())}')
                  print(f'Dynamic: {dynamic_fields}')
                  sys.exit(1)

              # If version is dynamic, try to read it from __init__.py
              if 'version' in dynamic_fields:
                  try:
                      import re
                      with open('src/diffsense/__init__.py', 'r') as f:
                          content = f.read()
                      version_match = re.search(
                          r'__version__\s*=\s*[\"\\']([^\"\\'\\\n]+)[\"\\']',
                          content
                      )
                      if version_match:
                          version = version_match.group(1)
                          print(f'Found dynamic version: {version}')
                      else:
                          print('WARNING: Could not find __version__')
                  except Exception as e:
                      print(f'WARNING: Could not read version: {e}')

              # Check optional fields
              optional_fields = ['authors', 'maintainers', 'license']
              for field in optional_fields:
                  if field not in project:
                      print(f'INFO: Optional field missing: {field}')

              print('Package metadata validation passed')
              name = project.get('name', 'unknown')
              if 'version' in project:
                  print(f'Project: {name} v{project[\"version\"]}')
              else:
                  print(f'Project: {name} (dynamic version)')

          except Exception as e:
              print(f'ERROR: Failed to validate: {e}')
              sys.exit(1)
          "
